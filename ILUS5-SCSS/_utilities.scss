$fontSizeName: (
    1: small,
    2: regular,
    4: medium,
    6: large,
    7: xl,
    8: jumbo
);

$fontWeightName: (
    1: thinnest,
    2: thinner,
    3: thin,
    4: regular,
    5: medium,
    7: bold,
    8: bolder,
    9: boldest
);

$fontName: (
    1: "Roboto",
    2: "Montserrat",
    3: "Comfortaa",
    4: "Cinzel",
    5: cursive,
    6: "Courier New",
    7: Arial
);

$validSides: (
    1: (
        right,
        left
    ),
    2: (
        top,
        left,
        bottom,
        right
    ),
    3: (
        right,
        center,
        left
    )
);

$borderRadius: (
    circle: 50%,
    pill: 20000px,
    rounded: 7px,
    lil-round: 3px,
    sharp: 0px
);

$validPositions: (
    fixed,
    relative,
    absolute,
    sticky
);

$validDisplays: (
    block,
    inline,
    inline-flex,
    inline-block,
    flex,
    grid
);

$h_w: (
    height -full 100vh,
    height -half 50vh,
    width -full 100vw,
    width -half 50vw
);

$wrap: (
    wrap top 5rem,
    wrap-just top 3rem,
    wrap-bottom bottom 5rem,
    wrap-bottom-just bottom 3rem
);

$overflow: (
    none hidden "",
    scroll scroll "",
    none hidden -x,
    none hidden -y,
    scroll scroll -x,
    scroll scroll -y
);

$animations: (
    name: (
        fade,
        zoom,
        spin,
        top,
        left,
        down,
        right,
        flip,
        jelly
    ),
    count: (
        forever infinite,
        thrice 3,
        twice 2
    ),
    dur: (
        fastest 0.1s,
        faster 0.25s,
        fast 0.5s,
        slow 1.5s,
        slower 2s,
        slowest 3s,
    ),
    direct: (
        alter alternate,
        reverse reverse,
        alter-reverse alternate-reverse
    )
);

[disabled]
{
    opacity: 0.5;
    text-decoration: line-through;
}

[data-tooltip]
{
    position: relative;
    &::after
    {
        position: absolute;
	    z-index: -100;
	    content: attr(data-tooltip);
	    background: rgba(0, 0, 0, 0.75);
	    backdrop-filter: opacity(0);
	    color: lighten($night, 100%);
	    left: 10%;
	    opacity: 0;
	    transition: 0.5s;
	    padding: 0.2rem 0.75rem;
	    border-radius: 0.35rem;
	    width: 70px;
	    transform: scale(0.1);
        font-size: 0.7rem;
        margin: {
            bottom: 5rem;
        };
    }
    &:focus::after,
    &:hover::after
    {
        z-index: 100;
	    opacity: 1;
	    transform: scale(1.2) translateY(-110%);
    }
}

@each $side in map-get($validSides, 1)
{
    .#{$side}
    {
        float: $side;
    }
}

.center
{
    display: grid;
    place-items: center;
}

@each $side2 in map-get($validSides, 2)
{
    .align-#{$side2}
    {
        #{$side2}: 0;
    }
}

@each $side3 in map-get($validSides, 3)
{
    .text-#{$side3}
    {
        text-align: $side3;
    }
}

@each $Bclass, $Bradius in $borderRadius {
    .#{$Bclass}
    {
        border-radius: #{$Bradius};
    }
}

.glass
{
	backdrop-filter: blur(20px);
	background-color: rgba(255, 255, 255, 0.4);
	color: darken($night, 100%);
}

@each $pos in $validPositions {
    .#{$pos}
    {
        position: $pos;
    }
}

@each $dis in $validDisplays
{
    .#{$dis}
    {
        display: $dis;
    }
}

.hide
{
    display: none;
}

.transparent
{
	background-color: transparent;
}

.transform-none
{
	transform: none;
}

.border-none
{
	border: none;
}

@each $hW, $H_WProperty, $H_WValue in $h_w {
    .#{$hW}#{$H_WProperty}
    {
        #{$hW}: #{$H_WValue};
    }
}

.strech-full
{
	display: block;
	width: 100%;
}

.pack-0
{
    padding: 0;
}

.margin-0
{
    margin: 0;
}

@for $iPad_Mar from 3 to 9 {
    $iPad_MarNumber: $iPad_Mar  - 2;
    @if $iPad_MarNumber == 4 {
        .pack-#{$iPad_MarNumber},
        .pack
        {
            padding: $iPad_MarNumber * 0.25rem;
        }
        .margin-#{$iPad_MarNumber},
        .margin
        {
            margin: $iPad_MarNumber * 0.25rem;
        }
    } @else if $iPad_MarNumber > 4 {
        .pack-#{$iPad_MarNumber}
        {
            padding: #{$iPad_MarNumber / 2}rem;
        }
        .margin-#{$iPad_MarNumber}
        {
            margin: #{$iPad_MarNumber / 2}rem;
        }
    } @else {
        .pack-#{$iPad_MarNumber}
        {
            padding: $iPad_MarNumber * 0.25rem;
        }
        .margin-#{$iPad_MarNumber}
        {
            margin: $iPad_MarNumber * 0.25rem;
        }
    }
}

@each $wrapper, $Wside, $Wvalue in $wrap {
    .#{$wrapper}
    {
        padding: {
            #{$Wside}: #{$Wvalue} !important;
        };
    }
}

@each $Oclass, $Ovalue, $xOry in $overflow {
    .overflow#{$xOry}-#{$Oclass}
    {
        overflow#{$xOry}: #{$Ovalue};
    }
}

@for $iSize from 3 to 11 {
    $iSizeNumber: $iSize - 2;
    @if $iSizeNumber == 3 {
        .font-size-#{$iSizeNumber}
        {
            font-size: $iSize * 0.25rem;
        }
    } @else if $iSizeNumber == 5 {
        .font-size-#{$iSizeNumber}
        {
            font-size: $iSize * 0.25rem;
        }
    } @else if $iSizeNumber > 6 {
        .font-size-#{$iSizeNumber},
        .font-#{map-get($fontSizeName, $iSizeNumber)}
        {
            font-size: $iSize * 0.25rem + 0.25rem * ($iSizeNumber - 6);
        }
    } @else {
        .font-size-#{$iSizeNumber},
        .font-#{map-get($fontSizeName, $iSizeNumber)}
        {
            font-size: $iSize * 0.25rem;
        }
    }
}

@for $iWeight from 1 to 10 {
    $iWeightNumber: $iWeight * 100;
    @if $iWeight != 6 {
        .text-#{map-get($fontWeightName, $iWeight)}
        {
            font-weight: $iWeightNumber;
        }
    }
}

@for $iFont from 1 to 8 {
    @if $iFont < 3 {
        .font-#{$iFont}
        {
            font-family: map-get($fontName, $iFont), sans-serif;
        }
    } @else if $iFont == 3 {
        .font-#{$iFont}
        {
            font-family: map-get($fontName, $iFont), cursive;
        }
    } @else if $iFont == 4 {
        .font-#{$iFont}
        {
            font-family: map-get($fontName, $iFont), serif;
        }
    } @else if $iFont == 6 {
        .font-mono
        {
            font-family: map-get($fontName, $iFont), monospace;
        }
    } @else if $iFont == 7 {
        .font-arial
        {
            font-family: map-get($fontName, $iFont), Helvetica, sans-serif;
        }
    } @else {
        .font-#{map-get($fontName, $iFont)}
        {
            font-family: map-get($fontName, $iFont);
        }
    }
}

.flat
{
	box-shadow: none;
}

.shadow
{
	box-shadow: 0 0 5px rgba(0, 0, 0, 0.35);
}

.depth
{
	box-shadow: inset 1px 2px 9px $auto;
}

@each $animName in map-get($animations, name) {
    .anime-#{$animName}
    {
        animation: #{$animName} 1s;
    }
}

.anime-constant
{
    animation: {
        timing-function: linear;
    };
}

@each $animeIntClass, $animeIntValue in map-get($animations, count) {
    .anime-#{$animeIntClass}
    {
        animation: {
            iteration-count: #{$animeIntValue};
        };
    }
}

@each $animeDurClass, $animeDurValue in map-get($animations, dur) {
    .anime-#{$animeDurClass}
    {
        animation: {
            duration: #{$animeDurValue};
        };
    }
}

.anime-delayed
{
    animation: {
        delay: 0.5s;
    };
}

.anime-forwards
{
    animation: {
        fill-mode: forwards;
    };
}

@each $animeDirectClass, $animeDirectValue in map-get($animations, direct) {
    .anime-#{$animeDirectClass}
    {
        animation: {
            direction: #{$animeDirectValue};
        };
    }
}

@include colors (red, $red);
@include colors (salmon, $salmon);
@include colors (maroon, $maroon);
@include colors (lime, $lime);
@include colors (green, $green);
@include colors (olive, $olive);
@include colors (blue, $blue);
@include colors (cyan, $cyan);
@include colors (indigo, $indigo);
@include colors (gold, $gold);
@include colors (yellow, $yellow);
@include colors (sand, $sand);
@include colors (violet, $violet);
@include colors (purple, $purple);
@include colors (magenta, $magenta);
@include colors (rose, $rose);
@include colors (pink, $pink);
@include colors (apple, $apple);
@include colors (sea, $sea);
@include colors (teal, $teal);
@include colors (aqua, $aqua);
@include colors (orange, $orange);
@include colors (amber, $amber);
@include colors (vermilion, $vermilion);
@include colors (light, $light);
@include colors (grey, $grey);
@include colors (steel, $steel);
@include colors (alpha, $alpha);
@include colors (auto, $auto);
@include colors (dark, $dark);
@include colors (night, $night);
@include colors (brown, $brown);
@include colors (wood, $wood);
@include colors (coco, $coco);

.outline-mini
{
    border: {
        width: 1px;
    };
}

.container
{
	position: relative;
	width: 100%;
	margin: 0 auto;
	padding: 1rem;
	max-width: 960px;
	box-sizing: border-box;
}

.col,
.filler
{
	width: 100%;
	float: left;
	box-sizing: border-box;
}

@for $col_off from 1 to 13 {
    $col_off_ratio: 8.333333333%;
    .col-#{$col_off}
    {
        width: #{$col_off_ratio * $col_off};
    }
    .offset-#{$col_off}
    {
        margin: {
            left: #{$col_off_ratio * $col_off};
        };
    }
}